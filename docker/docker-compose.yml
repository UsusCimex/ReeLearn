services:
  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.backend
    image: backend_image
    volumes:
      - ../backend:/app
      - /tmp/videos:/tmp/videos
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started
    env_file:
      - .env

  worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile.backend
    image: worker_image
    volumes:
      - ../backend:/app
      - /tmp/videos:/tmp/videos
      - whisper_cache:/root/.cache/whisper
    depends_on:
      db:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started
    env_file:
      - .env
    environment:
      PYTHONPATH: "/app"
    command: celery -A worker.celery_app worker --loglevel=info -P solo

  flower:
    image: mher/flower
    container_name: flower
    command: celery flower
    environment: 
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
    ports:
      - "5555:5555"
    depends_on:
      worker:
        condition: service_started

  db:
    image: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h db -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6
    ports:
      - "6379:6379"

  minio:
    image: minio/minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ACCESS_KEY: ${S3_ACCESS_KEY}
      MINIO_SECRET_KEY: ${S3_SECRET_KEY}
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
      MINIO_CORS_ALLOW_ORIGINS: "*"
      MINIO_API_CORS_ALLOW_ORIGIN: "*"
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Консоль
    volumes:
      - minio_data:/data

  elasticsearch:
    build:
      context: ..
      dockerfile: docker/Dockerfile.elastic
    image: elasticsearch_image
    container_name: es-multilingual
    environment:
      discovery.type: single-node
      xpack.security.enabled: "false"
      ES_JAVA_OPTS: "-Xms1g -Xmx1g"
    ports:
      - "9200:9200"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cat/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local
  esdata:
    driver: local
  whisper_cache:
    driver: local
